import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useSelector } from 'react-redux';
import Header from '../../components/common/Header';
import Card from '../../components/common/Card';
import Tag from '../../components/common/Tag';
import EmptyState from '../../components/common/EmptyState';
import LoadingSpinner from '../../components/common/LoadingSpinner';
import AutoScrollTabs from '../../components/stores/AutoScrollTabs';
import styles from './CouponHistory.module.css';

export default function CouponHistory() {
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(true);
  const [selectedTab, setSelectedTab] = useState('all');
  const [couponHistory, setCouponHistory] = useState([]);

  // ReduxÏóêÏÑú Ïø†Ìè∞ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
  const coupons = useSelector(state => state.coupon.coupons);
  const orders = useSelector(state => state.order.orders);

  useEffect(() => {
    const fetchCouponHistory = async () => {
      try {
        setIsLoading(true);
        
        // Ïã§Ï†ú ÌôòÍ≤ΩÏóêÏÑúÎäî API Ìò∏Ï∂ú
        // const response = await couponAPI.getCouponHistory();
        // setCouponHistory(response.data);
        
        // Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎäî Mock Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
        const generateCouponHistory = () => {
          // Redux ÏÉÅÌÉú ÌôúÏö©ÌïòÏó¨ Îçî ÌòÑÏã§Ï†ÅÏù∏ Mock Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
          const usedCoupons = [
            {
              id: 'history_1',
              couponId: 'coupon_1',
              couponName: 'Ïã†Í∑ú Í∞ÄÏûÖ Ï∂ïÌïò Ïø†Ìè∞',
              discountType: 'amount',
              discountValue: 3000,
              orderId: 'order_1',
              orderAmount: 25000,
              storeName: 'ÍπÄÏπòÏ∞åÍ∞ú ÎßõÏßë',
              usedAt: '2024-12-18T18:30:00Z',
              status: 'used'
            },
            {
              id: 'history_2',
              couponId: 'coupon_2',
              couponName: 'Ï£ºÎßê ÌäπÍ∞Ä Ìï†Ïù∏',
              discountType: 'percentage',
              discountValue: 15,
              orderId: 'order_2',
              orderAmount: 18000,
              storeName: 'ÏπòÌÇ® Ï†ÑÎ¨∏Ï†ê',
              usedAt: '2024-12-17T19:45:00Z',
              status: 'used'
            },
            {
              id: 'history_3',
              couponId: 'coupon_3',
              couponName: 'Ï≤´ Ï£ºÎ¨∏ Ìï†Ïù∏ Ïø†Ìè∞',
              discountType: 'amount',
              discountValue: 5000,
              orderId: null,
              orderAmount: 0,
              storeName: null,
              usedAt: null,
              expiredAt: '2024-12-15T23:59:59Z',
              status: 'expired'
            },
            {
              id: 'history_4',
              couponId: 'coupon_4',
              couponName: 'ÏÉùÏùº Ï∂ïÌïò Ïø†Ìè∞',
              discountType: 'percentage',
              discountValue: 20,
              orderId: 'order_3',
              orderAmount: 32000,
              storeName: 'ÌîºÏûê ÎßõÏßë',
              usedAt: '2024-12-16T20:15:00Z',
              status: 'used'
            }
          ];

          setCouponHistory(usedCoupons);
          setIsLoading(false);
        };
        
        setTimeout(generateCouponHistory, 1000);
      } catch (error) {
        console.error('Ïø†Ìè∞ ÌûàÏä§ÌÜ†Î¶¨ Î°úÎî© Ïã§Ìå®:', error);
        setIsLoading(false);
        // ÏóêÎü¨ ÏÉÅÌÉú Ï≤òÎ¶¨
      }
    };
    
    fetchCouponHistory();
  }, [coupons, orders]);

  const filterTabs = [
    { id: 'all', label: 'Ï†ÑÏ≤¥', count: couponHistory.length },
    { id: 'used', label: 'ÏÇ¨Ïö©ÏôÑÎ£å', count: couponHistory.filter(h => h.status === 'used').length },
    { id: 'expired', label: 'Í∏∞Í∞ÑÎßåÎ£å', count: couponHistory.filter(h => h.status === 'expired').length }
  ];

  const filteredHistory = couponHistory.filter(item => {
    if (selectedTab === 'all') return true;
    return item.status === selectedTab;
  });

  const calculateSavedAmount = (item) => {
    if (item.discountType === 'amount') {
      return item.discountValue;
    } else if (item.discountType === 'percentage') {
      return Math.floor(item.orderAmount * (item.discountValue / 100));
    }
    return 0;
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('ko-KR', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const handleGoToOrder = (orderId) => {
    if (orderId) {
      navigate(`/orders/${orderId}`);
    }
  };

  const handleGoToCoupons = () => {
    navigate('/coupons');
  };

  if (isLoading) {
    return (
      <div className={styles.container}>
        <Header title="Ïø†Ìè∞ ÏÇ¨Ïö©ÎÇ¥Ïó≠" />
        <div className={styles.loadingContainer}>
          <LoadingSpinner message="Ïø†Ìè∞ ÏÇ¨Ïö©ÎÇ¥Ïó≠ÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë..." />
        </div>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <Header title="Ïø†Ìè∞ ÏÇ¨Ïö©ÎÇ¥Ïó≠" />
      
      <div className={styles.content}>
        {/* ÌïÑÌÑ∞ ÌÉ≠ */}
        <div className={styles.tabContainer}>
          <AutoScrollTabs
            tabs={filterTabs}
            activeTab={selectedTab}
            onTabChange={setSelectedTab}
          />
        </div>

        {/* ÌÜµÍ≥Ñ Ï†ïÎ≥¥ */}
        <Card className={styles.statsCard}>
          <div className={styles.statsGrid}>
            <div className={styles.statItem}>
              <span className={styles.statNumber}>
                {couponHistory.filter(h => h.status === 'used').length}
              </span>
              <span className={styles.statLabel}>ÏÇ¨Ïö©Ìïú Ïø†Ìè∞</span>
            </div>
            <div className={styles.statItem}>
              <span className={styles.statNumber}>
                {couponHistory
                  .filter(h => h.status === 'used')
                  .reduce((total, item) => total + calculateSavedAmount(item), 0)
                  .toLocaleString()}Ïõê
              </span>
              <span className={styles.statLabel}>Ï¥ù Ï†àÏïΩ Í∏àÏï°</span>
            </div>
          </div>
        </Card>

        {/* Ïø†Ìè∞ ÎÇ¥Ïó≠ Î¶¨Ïä§Ìä∏ */}
        {filteredHistory.length === 0 ? (
          <EmptyState
            icon="üé´"
            title="Ïø†Ìè∞ ÏÇ¨Ïö©ÎÇ¥Ïó≠Ïù¥ ÏóÜÏäµÎãàÎã§"
            description={
              selectedTab === 'all' 
                ? "ÏïÑÏßÅ ÏÇ¨Ïö©Ìïú Ïø†Ìè∞Ïù¥ ÏóÜÏäµÎãàÎã§.\nÏø†Ìè∞Ìï®ÏóêÏÑú ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Ïø†Ìè∞ÏùÑ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî."
                : selectedTab === 'used'
                ? "ÏÇ¨Ïö©Ìïú Ïø†Ìè∞Ïù¥ ÏóÜÏäµÎãàÎã§."
                : "ÎßåÎ£åÎêú Ïø†Ìè∞Ïù¥ ÏóÜÏäµÎãàÎã§."
            }
            actionText="Ïø†Ìè∞Ìï® Î≥¥Í∏∞"
            onAction={handleGoToCoupons}
          />
        ) : (
          <div className={styles.historyList}>
            {filteredHistory.map((item) => (
              <Card key={item.id} className={styles.historyCard}>
                <div className={styles.cardHeader}>
                  <div className={styles.couponInfo}>
                    <h3 className={styles.couponName}>{item.couponName}</h3>
                    <div className={styles.discountInfo}>
                      {item.discountType === 'amount' ? (
                        <span className={styles.discountAmount}>
                          {item.discountValue.toLocaleString()}Ïõê Ìï†Ïù∏
                        </span>
                      ) : (
                        <span className={styles.discountAmount}>
                          {item.discountValue}% Ìï†Ïù∏
                        </span>
                      )}
                    </div>
                  </div>
                  
                  <Tag 
                    variant={item.status === 'used' ? 'success' : 'danger'}
                    size="small"
                  >
                    {item.status === 'used' ? 'ÏÇ¨Ïö©ÏôÑÎ£å' : 'Í∏∞Í∞ÑÎßåÎ£å'}
                  </Tag>
                </div>

                <div className={styles.cardBody}>
                  {item.status === 'used' ? (
                    <>
                      <div className={styles.orderInfo}>
                        <div className={styles.orderRow}>
                          <span className={styles.label}>Îß§Ïû•Î™Ö</span>
                          <span className={styles.value}>{item.storeName}</span>
                        </div>
                        <div className={styles.orderRow}>
                          <span className={styles.label}>Ï£ºÎ¨∏ Í∏àÏï°</span>
                          <span className={styles.value}>
                            {item.orderAmount.toLocaleString()}Ïõê
                          </span>
                        </div>
                        <div className={styles.orderRow}>
                          <span className={styles.label}>Ìï†Ïù∏ Í∏àÏï°</span>
                          <span className={styles.discountValue}>
                            -{calculateSavedAmount(item).toLocaleString()}Ïõê
                          </span>
                        </div>
                        <div className={styles.orderRow}>
                          <span className={styles.label}>ÏÇ¨Ïö© ÎÇ†Ïßú</span>
                          <span className={styles.value}>
                            {formatDate(item.usedAt)}
                          </span>
                        </div>
                      </div>
                      
                      {item.orderId && (
                        <button
                          className={styles.orderButton}
                          onClick={() => handleGoToOrder(item.orderId)}
                        >
                          Ï£ºÎ¨∏ ÏÉÅÏÑ∏Î≥¥Í∏∞
                        </button>
                      )}
                    </>
                  ) : (
                    <div className={styles.expiredInfo}>
                      <div className={styles.expiredRow}>
                        <span className={styles.label}>ÎßåÎ£å ÎÇ†Ïßú</span>
                        <span className={styles.value}>
                          {formatDate(item.expiredAt)}
                        </span>
                      </div>
                      <p className={styles.expiredMessage}>
                        Ïù¥ Ïø†Ìè∞ÏùÄ ÏÇ¨Ïö© Í∏∞Í∞ÑÏù¥ ÎßåÎ£åÎêòÏóàÏäµÎãàÎã§.
                      </p>
                    </div>
                  )}
                </div>
              </Card>
            ))}
          </div>
        )}
      </div>
    </div>
  );
} 
