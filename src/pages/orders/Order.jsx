import React, { useEffect, useCallback } from "react";
import { useNavigate } from "react-router-dom";
import { useSelector, useDispatch } from "react-redux";
import OrderCard from "../../components/orders/OrderCard";
import OrderSearch from "../../components/orders/OrderSearch";
import OrderTab from "../../components/orders/OrderTab";
import { selectActiveOrders, selectCompletedOrders, selectAllOrders, updateOrderStatus } from "../../store/orderSlice";
import LoadingSpinner from "../../components/common/LoadingSpinner";
import EmptyState from "../../components/common/EmptyState";
import { orderAPI } from "../../services/orderAPI";
import { logger } from "../../utils/logger";
import styles from "./Order.module.css";

export default function Order() {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const [selectedTab, setSelectedTab] = React.useState("past");

  // ReduxÏóêÏÑú Ï£ºÎ¨∏ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
  const allOrders = useSelector(selectAllOrders);
  const activeOrders = useSelector(selectActiveOrders);
  const completedOrders = useSelector(selectCompletedOrders);
  const isLoading = useSelector(state => state.order?.loading || false);

  // Ï£ºÎ¨∏ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ìï∏Îì§Îü¨
  const handleStatusChange = useCallback((orderId, currentStatus) => {
    if (process.env.NODE_ENV === 'development') {
      logger.log(`üîÑ Ï£ºÎ¨∏ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ - Ï£ºÎ¨∏ ID: ${orderId}, ÏÉÅÌÉú: ${currentStatus}`);
    }
    dispatch(updateOrderStatus({ 
      orderId, 
      status: currentStatus,
      message: `Ï£ºÎ¨∏ ÏÉÅÌÉúÍ∞Ä ${currentStatus}Î°ú Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§.`
    }));
  }, [dispatch]);

  // ÌôúÏÑ± Ï£ºÎ¨∏Îì§Ïóê ÎåÄÌïú ÏÉÅÌÉú Ï∂îÏ†Å
  useEffect(() => {
    if (!activeOrders.length) return;

    const intervals = {};
    const orderIds = {}; // Ï£ºÎ¨∏ IDÎ•º Ï†ÄÏû•Ìï† Í∞ùÏ≤¥

    // Í∞Å ÌôúÏÑ± Ï£ºÎ¨∏Ïóê ÎåÄÌïú Ìè¥ÎßÅ ÏÑ§Ï†ï
    activeOrders.forEach(order => {
      const orderId = order.id; // Ï£ºÎ¨∏ IDÎ•º Ï†ÄÏû•
      orderIds[orderId] = true;

      const pollOrderStatus = async () => {
        try {
          const response = await orderAPI.trackOrder(orderId);
          const updatedOrder = response.data;
          
          // ÏÉÅÌÉúÍ∞Ä Î≥ÄÍ≤ΩÎêòÏóàÍ±∞ÎÇò ÎßàÏßÄÎßâ Ï≤¥ÌÅ¨ ÏãúÍ∞ÑÏù¥ Îã§Î•∏ Í≤ΩÏö∞ ÏóÖÎç∞Ïù¥Ìä∏
          if (updatedOrder && (
            updatedOrder.status !== order.status || 
            updatedOrder.lastChecked !== order.lastChecked
          )) {
            handleStatusChange(orderId, updatedOrder.status);
          }
        } catch (error) {
          if (process.env.NODE_ENV === 'development') {
            logger.error(`Ï£ºÎ¨∏ ÏÉÅÌÉú Ï∂îÏ†Å Ïã§Ìå® (${orderId}):`, error);
          }
        }
      };

      // Ï¥àÍ∏∞ ÏÉÅÌÉú ÌôïÏù∏
      pollOrderStatus();

      // 5Ï¥àÎßàÎã§ ÏÉÅÌÉú ÌôïÏù∏
      intervals[orderId] = setInterval(pollOrderStatus, 5000);
    });

    // ÌÅ¥Î¶∞ÏóÖ: Î™®Îì† Ïù∏ÌÑ∞Î≤å Ï†úÍ±∞
    return () => {
      Object.entries(intervals).forEach(([orderId, interval]) => {
        clearInterval(interval);
        if (process.env.NODE_ENV === 'development') {
          logger.log(`‚èπÔ∏è Ï£ºÎ¨∏ ${orderId} Ï∂îÏ†Å Ï§ëÎã®`);
        }
      });
    };
  }, [activeOrders, handleStatusChange]);

  // ÎîîÎ≤ÑÍπÖÏùÑ ÏúÑÌïú Î°úÍ∑∏
  useEffect(() => {
    if (process.env.NODE_ENV === 'development') {
      logger.log('üìä Ï£ºÎ¨∏ Î™©Î°ù ÏóÖÎç∞Ïù¥Ìä∏:', {
        Ï†ÑÏ≤¥: allOrders.length,
        ÏßÑÌñâÏ§ë: activeOrders.length,
        ÏôÑÎ£å: completedOrders.length,
        Ï£ºÎ¨∏Î™©Î°ù: allOrders.map(order => ({
          id: order.id,
          storeName: order.storeName,
          status: order.status
        }))
      });
    }
  }, [allOrders, activeOrders, completedOrders]);

  const handleWriteReview = useCallback((order) => {
    navigate(`/orders/${order.id}/review`);
  }, [navigate]);

  const handleReorder = useCallback((order) => {
    if (order.storeId) {
      navigate(`/stores/${order.storeId}`);
    } else {
      if (process.env.NODE_ENV === 'development') {
        logger.warn('Ï£ºÎ¨∏ÏóêÏÑú Îß§Ïû• IDÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§:', order);
      }
      const foundStore = allOrders.find(o => o.storeName === order.storeName);
      if (foundStore && foundStore.storeId) {
        navigate(`/stores/${foundStore.storeId}`);
      } else {
        navigate('/');
      }
    }
  }, [navigate, allOrders]);

  // Redux Ï£ºÎ¨∏ Îç∞Ïù¥ÌÑ∞Î•º OrderCard ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
  const transformOrderForCard = useCallback((order) => {
    return {
      ...order,
      price: order.orderPrice || order.price || 0,
      date: order.createdAt ? new Date(order.createdAt).toLocaleString('ko-KR') : order.date,
      isCompleted: ['DELIVERED', 'COMPLETED'].includes(order.status),
      showReviewButton: ['DELIVERED', 'COMPLETED'].includes(order.status),
      rating: order.rating || 5,
    };
  }, []);

  // Redux Îç∞Ïù¥ÌÑ∞ Î≥ÄÌôò
  const displayCompletedOrders = completedOrders.map(transformOrderForCard);
  const displayActiveOrders = activeOrders.map(transformOrderForCard);

  if (isLoading) {
    return (
      <div>
        <OrderTab onTabChange={setSelectedTab} />
        <LoadingSpinner 
          message="Ï£ºÎ¨∏ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ë..." 
          pageLoading
        />
      </div>
    );
  }

  return (
    <div>
      <OrderTab onTabChange={setSelectedTab} />
      <OrderSearch className={styles.orderSearch} />
      
      {selectedTab === "past" && (
        displayCompletedOrders.length > 0 ? (
          displayCompletedOrders.map((order) => (
            <OrderCard
              key={order.id}
              order={order}
              className={styles.orderCard}
              onWriteReview={() => handleWriteReview(order)}
              onReorder={() => handleReorder(order)}
            />
          ))
        ) : (
          <EmptyState
            variant="order"
            title="ÏïÑÏßÅ ÏôÑÎ£åÎêú Ï£ºÎ¨∏Ïù¥ ÏóÜÏäµÎãàÎã§"
            description="Ï≤´ Ï£ºÎ¨∏ÏùÑ ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî"
            actionText="Ï£ºÎ¨∏ÌïòÎü¨ Í∞ÄÍ∏∞"
            onAction={() => navigate('/')}
          />
        )
      )}
      
      {selectedTab === "preparing" && (
        displayActiveOrders.length > 0 ? (
          displayActiveOrders.map((order) => (
            <OrderCard
              key={order.id}
              order={order}
              className={styles.orderCard}
              onOpenStatus={() => navigate(`/orders/${order.id}/status`)}
            />
          ))
        ) : (
          <EmptyState
            variant="order"
            title="ÏßÑÌñâ Ï§ëÏù∏ Ï£ºÎ¨∏Ïù¥ ÏóÜÏäµÎãàÎã§"
            description="ÏÉàÎ°úÏö¥ Ï£ºÎ¨∏ÏùÑ ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî"
            actionText="Ï£ºÎ¨∏ÌïòÎü¨ Í∞ÄÍ∏∞"
            onAction={() => navigate('/')}
          />
        )
      )}
    </div>
  );
}
