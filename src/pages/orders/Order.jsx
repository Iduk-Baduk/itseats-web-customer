import React, { useEffect, useCallback } from "react";
import { useNavigate } from "react-router-dom";
import { useSelector, useDispatch } from "react-redux";
import OrderCard from "../../components/orders/OrderCard";
import OrderSearch from "../../components/orders/OrderSearch";
import OrderTab from "../../components/orders/OrderTab";
import { selectActiveOrders, selectCompletedOrders, selectAllOrders, updateOrderStatus } from "../../store/orderSlice";
import LoadingSpinner from "../../components/common/LoadingSpinner";
import EmptyState from "../../components/common/EmptyState";
import { orderAPI } from "../../services/orderAPI";
import { logger } from "../../utils/logger";
import { useMultipleOrderTracking } from "../../hooks/useOrderTracking";
import styles from "./Order.module.css";

export default function Order() {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const [selectedTab, setSelectedTab] = React.useState("past");

  // ReduxÏóêÏÑú Ï£ºÎ¨∏ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
  const allOrders = useSelector(selectAllOrders);
  const activeOrders = useSelector(selectActiveOrders);
  const completedOrders = useSelector(selectCompletedOrders);
  const isLoading = useSelector(state => state.order?.loading || false);

  // ÌôúÏÑ± Ï£ºÎ¨∏Îì§Ïùò ID Î∞∞Ïó¥
  const activeOrderIds = activeOrders.map(order => order.id);

  // Ïó¨Îü¨ Ï£ºÎ¨∏ ÎèôÏãú Ï∂îÏ†Å
  useMultipleOrderTracking(activeOrderIds, {
    pollingInterval: 5000, // 5Ï¥àÎßàÎã§ Ìè¥ÎßÅ
    onStatusChange: (change) => {
      logger.log(`üîÑ Ï£ºÎ¨∏ ÏÉÅÌÉú Î≥ÄÍ≤Ω Í∞êÏßÄ - Ï£ºÎ¨∏ ID: ${change.orderId}, Ïù¥Ï†Ñ ÏÉÅÌÉú: ${change.previousStatus}, ÌòÑÏû¨ ÏÉÅÌÉú: ${change.currentStatus}`);
    }
  });

  // Ï£ºÎ¨∏ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ìï∏Îì§Îü¨
  const handleStatusChange = useCallback((orderId, currentStatus) => {
    logger.log(`üîÑ Ï£ºÎ¨∏ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ - Ï£ºÎ¨∏ ID: ${orderId}, ÏÉÅÌÉú: ${currentStatus}`);
    dispatch(updateOrderStatus({ 
      orderId, 
      status: currentStatus,
      message: `Ï£ºÎ¨∏ ÏÉÅÌÉúÍ∞Ä ${currentStatus}Î°ú Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§.`
    }));
  }, [dispatch]);

  const handleWriteReview = useCallback((order) => {
    navigate(`/orders/${order.id}/review`);
  }, [navigate]);

  const handleReorder = useCallback((order) => {
    if (order.storeId) {
      navigate(`/stores/${order.storeId}`);
    } else {
      logger.warn('Ï£ºÎ¨∏ÏóêÏÑú Îß§Ïû• IDÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§:', order);
      const foundStore = allOrders.find(o => o.storeName === order.storeName);
      if (foundStore && foundStore.storeId) {
        navigate(`/stores/${foundStore.storeId}`);
      } else {
        navigate('/');
      }
    }
  }, [navigate, allOrders]);

  // Redux Ï£ºÎ¨∏ Îç∞Ïù¥ÌÑ∞Î•º OrderCard ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
  const transformOrderForCard = useCallback((order) => {
    return {
      ...order,
      price: order.orderPrice || order.price || 0,
      date: order.createdAt ? new Date(order.createdAt).toLocaleString('ko-KR') : order.date,
      isCompleted: ['DELIVERED', 'COMPLETED'].includes(order.status),
      showReviewButton: ['DELIVERED', 'COMPLETED'].includes(order.status),
      rating: order.rating || 5,
    };
  }, []);

  // Redux Îç∞Ïù¥ÌÑ∞ Î≥ÄÌôò
  const displayCompletedOrders = completedOrders.map(transformOrderForCard);
  const displayActiveOrders = activeOrders.map(transformOrderForCard);

  if (isLoading) {
    return (
      <div>
        <OrderTab onTabChange={setSelectedTab} />
        <LoadingSpinner 
          message="Ï£ºÎ¨∏ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ë..." 
          pageLoading
        />
      </div>
    );
  }

  return (
    <div>
      <OrderTab onTabChange={setSelectedTab} />
      <OrderSearch className={styles.orderSearch} />
      
      {selectedTab === "past" && (
        displayCompletedOrders.length > 0 ? (
          displayCompletedOrders.map((order) => (
            <OrderCard
              key={order.id}
              order={order}
              className={styles.orderCard}
              onWriteReview={() => handleWriteReview(order)}
              onReorder={() => handleReorder(order)}
            />
          ))
        ) : (
          <EmptyState
            variant="order"
            title="ÏïÑÏßÅ ÏôÑÎ£åÎêú Ï£ºÎ¨∏Ïù¥ ÏóÜÏäµÎãàÎã§"
            description="Ï≤´ Ï£ºÎ¨∏ÏùÑ ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî"
            actionText="Ï£ºÎ¨∏ÌïòÎü¨ Í∞ÄÍ∏∞"
            onAction={() => navigate('/')}
          />
        )
      )}
      
      {selectedTab === "preparing" && (
        displayActiveOrders.length > 0 ? (
          displayActiveOrders.map((order) => (
            <OrderCard
              key={order.id}
              order={order}
              className={styles.orderCard}
              onOpenStatus={() => navigate(`/orders/${order.id}/status`)}
            />
          ))
        ) : (
          <EmptyState
            variant="order"
            title="ÏßÑÌñâ Ï§ëÏù∏ Ï£ºÎ¨∏Ïù¥ ÏóÜÏäµÎãàÎã§"
            description="ÏÉàÎ°úÏö¥ Ï£ºÎ¨∏ÏùÑ ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî"
            actionText="Ï£ºÎ¨∏ÌïòÎü¨ Í∞ÄÍ∏∞"
            onAction={() => navigate('/')}
          />
        )
      )}
    </div>
  );
}
